AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Tappy Backend (Orders & Payments + API)

Parameters:
  JwtSecret:
    Type: String
    Description: JWT secret for auth tokens
    NoEcho: true
  DeployTag:
    Type: String
    Description: Small tag or git SHA for traceability
    Default: dev
  KhipuReceiverId:
    Type: String
    Description: Khipu receiver (cobrador) ID
    Default: ""
  KhipuSecret:
    Type: String
    Description: Khipu secret key
    NoEcho: true
    Default: ""
  KhipuBaseUrl:
    Type: String
    Description: Base URL for Khipu API
    Default: https://khipu.com/api/2.0
  KhipuApiKey:
    Type: String
    Description: Khipu API key (x-api-key header)
    NoEcho: true
    Default: ""
  PublicSuccessUrl:
    Type: String
    Description: Public success URL (frontend)
    Default: https://tappy.cl/checkout/success
  PublicCancelUrl:
    Type: String
    Description: Public cancel URL (frontend)
    Default: https://tappy.cl/checkout/cancel
  PublicBaseApi:
    Type: String
    Description: Public API base (for webhooks)
    Default: https://api.tappy.cl

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 15
    MemorySize: 512
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
        APP_BASE_URL: "https://tappy.cl"
        API_BASE_URL: "https://u1yadifvmj.execute-api.us-east-1.amazonaws.com/Prod"
        TBK_USE_INTEGRATION: "1"
        KHIPU_RECEIVER_ID: { Ref: KhipuReceiverId }
        KHIPU_SECRET: { Ref: KhipuSecret }
        KHIPU_BASE_URL: { Ref: KhipuBaseUrl }
        KHIPU_API_KEY: { Ref: KhipuApiKey }
        PUBLIC_SUCCESS_URL: { Ref: PublicSuccessUrl }
        PUBLIC_CANCEL_URL: { Ref: PublicCancelUrl }
        PUBLIC_BASE_API: { Ref: PublicBaseApi }
        JWT_SECRET: { Ref: JwtSecret }
        DEPLOY_TAG: { Ref: DeployTag }

Resources:

  # ---------- API Gateway (Explicit) with CORS ----------
  TappyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigins: "*"  # Cambiar a https://tappy.cl,https://www.tappy.cl cuando cierres
        AllowMethods: "GET,POST,PUT,DELETE,OPTIONS"
        AllowHeaders: "*"
        ExposeHeaders: "X-Deploy-Tag,x-auth-token"
        MaxAge: 86400
      EndpointConfiguration:
        Type: REGIONAL


  # ---------- DynamoDB: Orders ----------
  TappyOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tappy_Orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # ---------- DynamoDB: Payments ----------
  TappyPaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tappy_Payments
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: OrderIndex
          KeySchema:
            - AttributeName: orderId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # ---------- API (Express on Lambda via @vendia/serverless-express) ----------
  TappyApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: tappy-api
      CodeUri: .
      Handler: lambda.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: Tappy_Users
        - DynamoDBCrudPolicy:
            TableName: { Ref: TappyOrdersTable }
        - DynamoDBCrudPolicy:
            TableName: { Ref: TappyPaymentsTable }
      Events:
        ApiProxy:
          Type: Api
          Properties:
            RestApiId: { Ref: TappyApiGateway }
            Path: /{proxy+}
            Method: ANY

Outputs:
  ApiUrl:
    Description: Invoke URL for Prod stage
    Value:
      Fn::Sub: "https://${TappyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  OrdersTableName:
    Value: { Ref: TappyOrdersTable }
  PaymentsTableName:
    Value: { Ref: TappyPaymentsTable }
