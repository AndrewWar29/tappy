name: Deploy Full Stack (Backend + Frontend)

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - 'client/**'
      - '.github/workflows/deploy-full-stack.yml'
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write   # OIDC
  contents: read

concurrency:
  group: full-stack-deploy
  cancel-in-progress: true

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_backend != 'false' }}
    env:
      AWS_REGION: us-east-1
      STACK_NAME: tappy-api
    outputs:
      api-url: ${{ steps.deploy.outputs.api-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-BackendDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Build SAM application
        run: |
          cd server
          sam build

      - name: Deploy SAM application
        id: deploy
        run: |
          cd server
          
          echo "Preparing parameter overrides..."
          PARAM_OVERRIDES="JwtSecret=${{ secrets.JWT_SECRET }}"
          
          if [ -n "${{ secrets.KHIPU_RECEIVER_ID }}" ]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES KhipuReceiverId=${{ secrets.KHIPU_RECEIVER_ID }}"
          fi
          
          if [ -n "${{ secrets.KHIPU_SECRET }}" ]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES KhipuSecret=${{ secrets.KHIPU_SECRET }}"
          fi
          
          if [ -n "${{ secrets.KHIPU_API_KEY }}" ]; then
            PARAM_OVERRIDES="$PARAM_OVERRIDES KhipuApiKey=${{ secrets.KHIPU_API_KEY }}"
          fi
          
          echo "Parameter overrides prepared: $(echo $PARAM_OVERRIDES | sed 's/[^=]*=\*\*\*/***=***/g')"
          
          sam deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --resolve-s3 \
            --no-confirm-changeset \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --parameter-overrides "$PARAM_OVERRIDES" \
            --no-fail-on-empty-changeset
          
          # Get API URL from stack outputs
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Backend deployed successfully!"
          echo "üîó API URL: $API_URL"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: ${{ github.event.inputs.deploy_frontend != 'false' }}
    env:
      AWS_REGION: us-east-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-FrontendDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Build React app
        run: |
          cd client
          npm ci
          
          # Use the API URL from backend deployment
          export REACT_APP_API_BASE="${{ needs.deploy-backend.outputs.api-url }}"
          echo "üîß Building with API_BASE: $REACT_APP_API_BASE"
          
          npm run build

      - name: Deploy to S3
        run: |
          cd client
          
          # Get S3 bucket from CloudFormation stack
          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name tappy-frontend \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text)
          
          if [ -z "$S3_BUCKET" ]; then
            echo "‚ùå Error: Could not find S3 bucket from tappy-frontend stack"
            exit 1
          fi
          
          echo "üì¶ Deploying to S3 bucket: $S3_BUCKET"
          aws s3 sync build/ s3://$S3_BUCKET --delete
          
          echo "‚úÖ Frontend deployed successfully!"

      - name: Invalidate CloudFront
        run: |
          # Get CloudFront distribution ID
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name tappy-frontend \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' \
            --output text)
          
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "üîÑ Invalidating CloudFront distribution: $DISTRIBUTION_ID"
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
            echo "‚úÖ CloudFront invalidation created!"
          else
            echo "‚ö†Ô∏è  Warning: Could not find CloudFront distribution ID"
          fi

      - name: Summary
        run: |
          echo "üéâ Full stack deployment completed!"
          echo "üîó Backend API: ${{ needs.deploy-backend.outputs.api-url }}"
          echo "üåê Frontend: https://tappy.cl"
          echo ""
          echo "üß™ Test the payment flow:"
          echo "1. Go to https://tappy.cl"
          echo "2. Add items to cart"
          echo "3. Try Khipu payment - should work now!"